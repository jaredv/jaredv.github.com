// Generated by CoffeeScript 1.6.1
(function() {
  var advance, cl, constants, i, lex, numbers, operators, token, tree;

  cl = function(s) {
    return console.log(s);
  };

  operators = ['+', '-'];

  numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];

  constants = {
    pi: 3.141592653589793,
    e: 2.718281828459045
  };

  lex = function(exp) {
    var c, i, m1, num, op, out, _i, _j, _k, _l, _len, _len1, _len2, _len3;
    out = [];
    exp = exp.replace(' ', '');
    for (_i = 0, _len = exp.length; _i < _len; _i++) {
      c = exp[_i];
      for (_j = 0, _len1 = numbers.length; _j < _len1; _j++) {
        num = numbers[_j];
        if (c === num) {
          if (out.length > 0) {
            m1 = out.slice(-1)[0];
            if (m1.type === 'num') {
              out.pop();
              out.push({
                type: 'num',
                value: m1.value + c
              });
            } else {
              out.push({
                type: 'num',
                value: c
              });
            }
          } else {
            out.push({
              type: 'num',
              value: c
            });
          }
        }
      }
      for (_k = 0, _len2 = operators.length; _k < _len2; _k++) {
        op = operators[_k];
        if (c === op) {
          out.push({
            type: 'op',
            value: c
          });
        }
      }
    }
    for (_l = 0, _len3 = out.length; _l < _len3; _l++) {
      i = out[_l];
      if (i.type === 'num') {
        i.value = parseInt(i.value);
      }
    }
    return out;
  };

  cl(lex('12 + 145'));

  i = 0;

  token = function() {
    return tokens[i];
  };

  advance = function() {
    i++;
    return token;
  };

  tree = {};

}).call(this);
